GINGYMAN

1) Define required constants:
  1.1) Wordbank for the player to select from
  1.2) Max amount of chances

2) Define required variables used to track the state of the game:
  2.1) Use a wordbank array to represent the selected word choice.
  2.2) Use a variable to choose from words used in the game at random
  2.3) Use a winner variable to represent two different possibilities - player that won or player that lost.

3) Store elements on the page that will be accessed in code more than once in variables to make code more concise, readable and performant:
  3.1) messageEl
  3.2) letter
  3.3) playAgainBtn

4) Upon loading the app should:
  4.1) Initialize the state variables:
    4.1.1) Initialize the wordbank arrays so that it could be tracked in order for the player to choose/guess the letters 
    4.1.2) Initialize winner to determine whether the player won or lost
    4.1.3) Initialize gingyman to remove parts of them when the player chooses a letter incorrectly
  4.2) Render those state variables to the page:
    4.2.1) Render the word bank:
      4.2.1.1) Select word (of random) from wordbank:
      4.2.1.1.2) Create function in order to parse the word of random into separate letters
      4.3.1.1.3) Assign the separate letters to the empty spaces in browser
	    4.4.1.1.4) Player will choose a-z letter choices at the bottom of the browser
    4.2.2) Render a message:
      4.2.2.1) If the winner has a value other than null (game still in progress), don’t render a message
      4.2.2.2) If the winner didn’t guess correctly and used all their chances, render a lost message
      4.2.2.3) Otherwise, render a congratulatory message to which player has won 
  4.3) Wait for the user to click a letter

5) Handle a player clicking a letter:
  5.1) Check which letter is being clicked by using a function:
    5.1.1) If player chose the letter correctly, letter chosen will become green, then add that letter to the space(s) and allow the player to choose another letter without affecting number of chances
    5.1.2) If player chose the letter incorrectly, letter chosen will become red, then number of chances will go down by -1.
  5.2) If the letter is chosen, immediately return because that letter and space is already taken.
  5.3) If the winner is not null, immediately return because the game is over.
  5.4) Set the winner variable if there's a winner:
    5.4.1) Show message, and show play again button to generate a new random word
  5.5) If there’s a loser:
    5.5.2) Show message, show play again button to generate random word 
  5.6) All state has been updated, so render the state to the page (step 4.2).
        

6) Handle a player clicking the replay button:
  6.1) Do steps 4.1 (initialize the state variables) and 4.2 (render).
